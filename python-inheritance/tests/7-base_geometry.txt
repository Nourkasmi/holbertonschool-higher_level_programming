>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Valid integer_validator calls (no output expected)
>>> bg.integer_validator("width", 10)
>>> bg.integer_validator("height", 5)
>>> bg.integer_validator("depth", 3)

# Test: invalid type (string)
>>> try:
...     bg.integer_validator("width", "10")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] width must be an integer

# Test: invalid value (zero)
>>> try:
...     bg.integer_validator("height", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] height must be greater than 0

# Test: invalid value (negative)
>>> try:
...     bg.integer_validator("depth", -2)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] depth must be greater than 0

# Test: passing a list (invalid type)
>>> try:
...     bg.integer_validator("data", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] data must be an integer

# Test: passing a float (invalid type)
>>> try:
...     bg.integer_validator("ratio", 3.14)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] ratio must be an integer

# Test: calling area() which is not implemented
>>> try:
...     bg.area()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented
